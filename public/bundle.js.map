{"version":3,"file":"bundle.js","sources":["webpack:///webpack/bootstrap e459eb91b4074bb6d488","webpack:///./app/app.js","webpack:///./app/api/HComment.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e459eb91b4074bb6d488","import HComment from './api/HComment';\n\ndocument.addEventListener('DOMContentLoaded', function _loaded() {\n  document.removeEventListener('DOMContentLoaded', _loaded);\n  let comment = new HComment();\n  comment.init('commentBox1');\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/app.js\n// module id = 0\n// module chunks = 0","export default class HComment {\n\n  constructor() {\n    this.commentBox = null;\n    this.commentField = null;\n    this.mentionList = null;\n    this.userList = null;\n    this.filteredUserList = null;\n    this.mlDOM = null;\n    this.shouldCheckCase1 = true;\n    /**\n     * This should be set to true after an `@` sign is detected\n     * as typed. While true, text input of the user should be\n     * recorded until this variable is set back to false.\n     *\n     * While text input is being recorded, the text is at the same\n     * time is being sent through to the `getUsersFromAtSign` fn.\n     */\n    this.isCheckingCase2 = false;\n    this.nickText = '';\n    this.userInput = '';\n    this.mentionAtPos = null;\n    this.currentCaretPos = 0;\n  }\n\n  /**\n   * A hack of selecting nothing to give us the current position\n   * of the cursor aka caret.\n   */\n  getCaretPosition() {\n    let savedRange;\n    // Works in Firefox, Chrome, Opera, Safari, and IE9+\n    if (window.getSelection && window.getSelection().rangeCount > 0) {\n      savedRange = window.getSelection().getRangeAt(0).cloneRange();\n    } else if (document.selection) {\n      savedRange = document.selection.createRange();\n    }\n    return savedRange.endOffset;\n  }\n  /**\n   * adding the clicked on name to the comment field.\n   */\n  addNick(name, uInput) {\n    /**\n     * A long string with something like @str being written\n     *\n     */\n    console.log(`user input: ${uInput} - caret pos: ${this.currentCaretPos} + 1`);\n    let fieldText = self.commentField.textContent;\n\n    let part1 = fieldText.substr(0, this.currentCaretPos - (uInput.length + 1));\n    let part2 = fieldText.substr(this.currentCaretPos);\n\n    console.log(`part1: ${part1}`);\n    console.log(`part2: ${part2}`);\n\n    let output = part1 + name + part2;\n\n    self.commentField.innerHTML = output;\n    self.shouldCheckCase1 = false;\n  }\n\n  /**\n   * loadJSON\n   * standard json loading function\n   */\n  loadJSON(url, callback) {\n    const xhr = new XMLHttpRequest();\n\n    if (xhr.overrideMimeType) {\n      xhr.overrideMimeType('application/json');\n    }\n\n    xhr.open('GET', url);\n\n    xhr.responseType = 'json';\n    xhr.addEventListener('load', function io_loadjson(e) {\n      if (e.target.status === 200 || e.target.status === 0) {\n        callback(e.target.response);\n      } else {\n        callback(console.error(`Not found: ${url}`));\n      }\n    });\n    xhr.addEventListener('error', callback);\n    xhr.addEventListener('timeout', callback);\n\n    try {\n      xhr.send(null);\n    } catch (e) {\n      callback(console.error(`Not found: ${url}`));\n    }\n  }\n\n  /**\n   * Search through the data and return the result from the user's input.\n   */\n  filterContent(arr, searchKey) {\n    return arr.filter(obj => Object.keys(obj).some(key => obj[key].includes(searchKey)));\n  }\n\n  /**\n   * attaching event listener for keyboard typing to\n   * eventually detect the `@` sign and other related logic.\n   */\n  attachEventListeners() {\n    let self = this;\n\n    this.commentField.addEventListener('keyup', e => {\n      self.userInput = self.commentField.textContent;\n\n      if (self.userInput.length >= 3) {\n        self.getUsersFromString(self.userInput);\n      }\n\n      // Check if ESC (27) key is pressed to destroy the mention list.\n      if (e.keyCode === 27) {\n        self.destroyMentionListDOM();\n        self.isCheckingCase2 = false;\n      }\n\n      if (e.keyCode === 8 && self.userInput.length === 0) {\n        self.destroyMentionListDOM();\n        self.isCheckingCase2 = false;\n        self.shouldCheckCase1 = true;\n      }\n      self.currentCaretPos = self.getCaretPosition();\n      if (self.isCheckingCase2) {\n        self.nickText = self.userInput.substring(self.mentionAtPos + 1, self.currentCaretPos);\n        console.log(self.nickText);\n        if (self.nickText.length >= 3) {\n          self.getUsersFromAtSign(self.nickText);\n        } else {\n          self.destroyMentionListDOM();\n        }\n      }\n    });\n\n    /**\n     * We bind a 'keypress' event because the `@` sign cannot be\n     * detected with the keyup event.\n     */\n    this.commentField.addEventListener('keypress', e => {\n      if (e.keyCode == \"@\".charCodeAt(0)) {\n        self.mentionAtPos = self.getCaretPosition();\n        self.isCheckingCase2 = true;\n      }\n    });\n  }\n\n  /**\n   * `attachMentionListListeners` appends a click event to each of\n   * the list items shown by `constructMentionListDOM`\n   */\n  attachMentionListListeners() {\n    const self = this;\n    [].forEach.call(this.mentionList.getElementsByClassName('user-suggestion'), el => {\n      el.addEventListener('click', function (e) {\n        if (e.currentTarget) {\n          let selectedNickName = e.currentTarget.querySelector('.user-nick-s').textContent;\n          self.addNick(selectedNickName, self.nickText);\n          self.destroyMentionListDOM();\n          self.isCheckingCase2 = false;\n        }\n      });\n    });\n  }\n\n  /**\n   * For both `getUsersFromAtSign` and `getUsersFromString`:\n   * We try here to construct the suggestion/mention list DOM\n   * Based on the string we get by first performing a comparaison\n   * between the userList (data.json content) preloaded against the\n   * string provided, then we pass the results to the function\n   * responsible for making visuals out of that result.\n   */\n\n  /**\n   * `getUsersFromAtSign` gets its data from detection of what\n   * is written after an @ sign randomly placed in the input field.\n   */\n  getUsersFromAtSign(s) {\n    this.filteredUserList = this.filterContent(this.userList, s);\n    this.constructMentionListDOM(this.filteredUserList);\n  }\n\n  /**\n   * `getUsersFromString` gets its data if the input field is empty\n   * and the user starts typing and the first character is upper case\n   * in that case we start checking against a potential name/username.\n   * With this behavior we try to mimick how Facebook decides to start\n   * searching for a username against what the user has typed.\n   */\n  getUsersFromString(s) {\n    if (s.charAt(0) === s.charAt(0).toUpperCase() && this.shouldCheckCase1 == true) {\n      this.filteredUserList = this.filterContent(this.userList, s);\n      this.constructMentionListDOM(this.filteredUserList);\n    }\n  }\n\n  /**\n   * `constructMentionListDOM` this function gets `data` as an array\n   * of names and usernames, and parses them then appends them into\n   * a visual list which is eventually the mention list/suggestion list.\n   */\n  constructMentionListDOM(data) {\n    this.mlDOM = '';\n\n    if (data.length === 0) {\n      this.destroyMentionListDOM();\n      this.shouldCheckCase1 = true;\n      return console.log('No matches found');\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      this.mlDOM += `\n        <div class=\"user-suggestion clearfix\">\n         <div class=\"user-photo-s\">\n           <img src='${data[i].avatar_url}'/>\n         </div>\n         <div class=\"user-details-s\">\n           <div class=\"user-name-s\">${data[i].name}</div>\n           <div class=\"user-nick-s\">@${data[i].username}</div>\n         </div>\n        </div>\n      `;\n\n      this.mentionList.style.display = 'block';\n    }\n\n    this.mentionList.innerHTML = this.mlDOM;\n    this.attachMentionListListeners();\n  }\n\n  /**\n   * `destroyMentionListDOM` removes the DOM of the suggestion list\n   * after we're done with it.\n   * Examples of when this is called is:\n   * - A name is clicked, and added to the input field, therefore there\n   * is no need for it to stay on display.\n   * - The user hits ESC button\n   */\n  destroyMentionListDOM() {\n    this.mlDOM = '';\n    this.mentionList.style.display = 'none';\n    this.shouldCheckCase1 = false;\n  }\n\n  /**\n   * `initData` loads the data from 'data.json' at the beginning\n   * of the web page's life cycle.\n   */\n  initData() {\n    const self = this;\n    if (this.userList !== null) {\n      return;\n    }\n    this.loadJSON('data/data.json', res => {\n      self.userList = res;\n    });\n  }\n\n  /**\n   * initialize the logic, requires a HTML id for the\n   * comment box\n   */\n  init(aCommentBox) {\n    this.initData();\n    this.commentBox = document.getElementById(aCommentBox);\n    this.commentField = this.commentBox.querySelector('#commentField');\n    this.mentionList = this.commentBox.querySelector('#mentionList');\n    this.attachEventListeners();\n  }\n\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/api/HComment.js\n// module id = 1\n// module chunks = 0"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;AC7DA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}